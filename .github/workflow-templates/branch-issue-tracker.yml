name: Move Issue to In Progress

on:
  create:
    branches:

jobs:
  move_issue_to_in_progress:
    runs-on: ubuntu-latest
    steps:
      - name: Move issue to In Progress
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // The ref will be in the format 'refs/heads/branch-name'
            const branchName = context.payload.ref.replace('refs/heads/', '');
            console.log(`Branch created: ${branchName}`);

            // Look for issue numbers in the branch name (common formats like issue-123, feature/123, 123-description, etc.)
            const issueMatches = branchName.match(/(?:^|[/\\-_])(\d+)(?:[/\\-_]|$)/);

            if (!issueMatches) {
              console.log('No issue number found in branch name');
              return;
            }

            const issueNumber = parseInt(issueMatches[1]);
            console.log(`Found issue reference: #${issueNumber}`);

            try {
              // Check if the issue exists
              const { data: issue } = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber
              });
              
              // Add a comment to the issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: `This issue has been moved to In Progress because branch \`${branchName}\` was created.`
              });
              
              // Find the project(s) this issue is in and update the status
              const projectQuery = `
                query($owner: String!, $repo: String!, $issueNumber: Int!) {
                  repository(owner: $owner, name: $repo) {
                    issue(number: $issueNumber) {
                      projectItems(first: 10) {
                        nodes {
                          id
                          project {
                            id
                            number
                            title
                          }
                          fieldValues(first: 20) {
                            nodes {
                              ... on ProjectV2ItemFieldSingleSelectValue {
                                id
                                name
                                field {
                                  ... on ProjectV2SingleSelectField {
                                    id
                                    name
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              const projectData = await github.graphql(projectQuery, {
                owner: context.repo.owner,
                repo: context.repo.repo,
                issueNumber: issueNumber
              });
              
              const projectItems = projectData.repository.issue.projectItems.nodes;
              
              for (const projectItem of projectItems) {
                // Find the status field for this item
                const statusField = projectItem.fieldValues.nodes.find(node => 
                  node.field && node.field.name.toLowerCase() === 'status'
                );
                
                // Check current status - we only want to update if it's in a status like 'Todo' or 'Backlog'
                const currentStatus = statusField ? statusField.name.toLowerCase() : null;
                const validStatusesToUpdate = ['todo', 'backlog', 'to do', 'open', 'new'];
                
                if (statusField && validStatusesToUpdate.includes(currentStatus)) {
                  // Find the field id for the status field
                  const fieldId = statusField.field.id;
                  
                  // Get all options for this status field
                  const optionsQuery = `
                    query($projectId: ID!, $fieldId: ID!) {
                      node(id: $projectId) {
                        ... on ProjectV2 {
                          field(id: $fieldId) {
                            ... on ProjectV2SingleSelectField {
                              options {
                                id
                                name
                              }
                            }
                          }
                        }
                      }
                    }
                  `;
                  
                  const optionsData = await github.graphql(optionsQuery, {
                    projectId: projectItem.project.id,
                    fieldId: fieldId
                  });
                  
                  // Find the option for "In Progress"
                  const inProgressOption = optionsData.node.field.options.find(option => 
                    option.name.toLowerCase() === 'in progress'
                  );
                  
                  if (inProgressOption) {
                    // Update the status field to "In Progress"
                    const updateMutation = `
                      mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                        updateProjectV2ItemFieldValue(input: {
                          projectId: $projectId
                          itemId: $itemId
                          fieldId: $fieldId
                          value: { 
                            singleSelectOptionId: $optionId
                          }
                        }) {
                          projectV2Item {
                            id
                          }
                        }
                      }
                    `;
                    
                    await github.graphql(updateMutation, {
                      projectId: projectItem.project.id,
                      itemId: projectItem.id,
                      fieldId: fieldId,
                      optionId: inProgressOption.id
                    });
                    
                    console.log(`Successfully moved issue #${issueNumber} to In Progress in project ${projectItem.project.title}`);
                  } else {
                    console.log(`Could not find an 'In Progress' option for project ${projectItem.project.title}`);
                  }
                } else if (statusField) {
                  console.log(`Issue #${issueNumber} status is '${statusField.name}', not updating from this status`);
                } else {
                  console.log(`Could not find status field for issue #${issueNumber} in project ${projectItem.project.title}`);
                }
              }
              
              if (projectItems.length === 0) {
                console.log(`Issue #${issueNumber} is not in any projects`);
              }
              
            } catch (error) {
              console.log(`Error processing issue #${issueNumber}: ${error}`);
            }
