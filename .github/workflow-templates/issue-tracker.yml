name: Move Issue to In Review

on:
  pull_request:
    types: [opened]

jobs:
  move_issue_to_review:
    runs-on: ubuntu-latest
    steps:
      - name: Move issue to In Review
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prBody = context.payload.pull_request.body;

            // Look for issue references in the PR body
            const issueReferences = prBody ? (prBody.match(/#(\d+)/g) || []) : [];
            // Also check the PR title for issue references
            const titleReferences = context.payload.pull_request.title ? (context.payload.pull_request.title.match(/#(\d+)/g) || []) : [];

            // Check for "closes", "fixes", or "resolves" keywords which GitHub uses to auto-close issues
            const closingReferences = [];
            if (prBody) {
              const matches = prBody.match(/(close[sd]?|fix(e[sd])?|resolve[sd]?)\s+#(\d+)/gi) || [];
              matches.forEach(match => {
                const numMatch = match.match(/#(\d+)/);
                if (numMatch) closingReferences.push(numMatch[0]);
              });
            }

            const allReferences = [...new Set([...issueReferences, ...titleReferences, ...closingReferences])];
            if (allReferences.length === 0) {
              console.log('No issue references found in PR title or body');
              return;
            }

            // Extract issue numbers
            const issueNumbers = allReferences.map(ref => parseInt(ref.substring(1)));
            console.log(`Found issue references: ${issueNumbers.join(', ')}`);

            // Process each referenced issue
            for (const issueNumber of issueNumbers) {
              try {
                // Get the issue to check if it exists
                const { data: issue } = await github.rest.issues.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber
                });
                
                // First, update the issue with a comment
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber,
                  body: `This issue has been moved to In Review because PR #${context.payload.pull_request.number} was opened.`
                });
                
                // Next, move the issue in GitHub Projects
                // This requires using GraphQL to update the status field
                
                // 1. Find the project(s) this issue is in
                const projectQuery = `
                  query($owner: String!, $repo: String!, $issueNumber: Int!) {
                    repository(owner: $owner, name: $repo) {
                      issue(number: $issueNumber) {
                        projectItems(first: 10) {
                          nodes {
                            id
                            project {
                              id
                              number
                              title
                            }
                            fieldValues(first: 20) {
                              nodes {
                                ... on ProjectV2ItemFieldSingleSelectValue {
                                  id
                                  name
                                  field {
                                    ... on ProjectV2SingleSelectField {
                                      id
                                      name
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                `;
                
                const projectData = await github.graphql(projectQuery, {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issueNumber: issueNumber
                });
                
                const projectItems = projectData.repository.issue.projectItems.nodes;
                
                for (const projectItem of projectItems) {
                  // Find the status field for this item
                  const statusField = projectItem.fieldValues.nodes.find(node => 
                    node.field && node.field.name.toLowerCase() === 'status'
                  );
                  
                  if (statusField && statusField.name.toLowerCase() === 'in progress') {
                    // Find the field id for the status field
                    const fieldId = statusField.field.id;
                    
                    // Get all options for this status field
                    const optionsQuery = `
                      query($projectId: ID!, $fieldId: ID!) {
                        node(id: $projectId) {
                          ... on ProjectV2 {
                            field(id: $fieldId) {
                              ... on ProjectV2SingleSelectField {
                                options {
                                  id
                                  name
                                }
                              }
                            }
                          }
                        }
                      }
                    `;
                    
                    const optionsData = await github.graphql(optionsQuery, {
                      projectId: projectItem.project.id,
                      fieldId: fieldId
                    });
                    
                    // Find the option for "In Review"
                    const inReviewOption = optionsData.node.field.options.find(option => 
                      option.name.toLowerCase() === 'in review'
                    );
                    
                    if (inReviewOption) {
                      // Update the status field to "In Review"
                      const updateMutation = `
                        mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                          updateProjectV2ItemFieldValue(input: {
                            projectId: $projectId
                            itemId: $itemId
                            fieldId: $fieldId
                            value: { 
                              singleSelectOptionId: $optionId
                            }
                          }) {
                            projectV2Item {
                              id
                            }
                          }
                        }
                      `;
                      
                      await github.graphql(updateMutation, {
                        projectId: projectItem.project.id,
                        itemId: projectItem.id,
                        fieldId: fieldId,
                        optionId: inReviewOption.id
                      });
                      
                      console.log(`Successfully moved issue #${issueNumber} to In Review in project ${projectItem.project.title}`);
                    } else {
                      console.log(`Could not find an 'In Review' option for project ${projectItem.project.title}`);
                    }
                  } else if (statusField) {
                    console.log(`Issue #${issueNumber} status is '${statusField.name}', not 'In Progress', so not changing`);
                  } else {
                    console.log(`Could not find status field for issue #${issueNumber} in project ${projectItem.project.title}`);
                  }
                }
                
                if (projectItems.length === 0) {
                  console.log(`Issue #${issueNumber} is not in any projects`);
                }
              } catch (error) {
                console.log(`Error processing issue #${issueNumber}: ${error}`);
              }
            }
